// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package controllers

import (
	"rate-limiter/domain"
	"rate-limiter/services"
	"sync"
)

// Ensure, that ServiceMock does implement services.Service.
// If this is not the case, regenerate this file with moq.
var _ services.Service = &ServiceMock{}

// ServiceMock is a mock implementation of services.Service.
//
//	func TestSomethingThatUsesService(t *testing.T) {
//
//		// make and configure a mocked services.Service
//		mockedService := &ServiceMock{
//			GetNotificationsFunc: func() (map[string]map[string]*domain.Notification, error) {
//				panic("mock out the GetNotifications method")
//			},
//			GetRuleByTypeFunc: func(s string) (*domain.RateLimitRule, error) {
//				panic("mock out the GetRuleByType method")
//			},
//			GetRulesFunc: func() (map[string]*domain.RateLimitRule, error) {
//				panic("mock out the GetRules method")
//			},
//			SendNotificationFunc: func(s1 string, s2 string) error {
//				panic("mock out the SendNotification method")
//			},
//		}
//
//		// use mockedService in code that requires services.Service
//		// and then make assertions.
//
//	}
type ServiceMock struct {
	// GetNotificationsFunc mocks the GetNotifications method.
	GetNotificationsFunc func() (map[string]map[string]*domain.Notification, error)

	// GetRuleByTypeFunc mocks the GetRuleByType method.
	GetRuleByTypeFunc func(s string) (*domain.RateLimitRule, error)

	// GetRulesFunc mocks the GetRules method.
	GetRulesFunc func() (map[string]*domain.RateLimitRule, error)

	// SendNotificationFunc mocks the SendNotification method.
	SendNotificationFunc func(s1 string, s2 string) error

	// calls tracks calls to the methods.
	calls struct {
		// GetNotifications holds details about calls to the GetNotifications method.
		GetNotifications []struct {
		}
		// GetRuleByType holds details about calls to the GetRuleByType method.
		GetRuleByType []struct {
			// S is the s argument value.
			S string
		}
		// GetRules holds details about calls to the GetRules method.
		GetRules []struct {
		}
		// SendNotification holds details about calls to the SendNotification method.
		SendNotification []struct {
			// S1 is the s1 argument value.
			S1 string
			// S2 is the s2 argument value.
			S2 string
		}
	}
	lockGetNotifications sync.RWMutex
	lockGetRuleByType    sync.RWMutex
	lockGetRules         sync.RWMutex
	lockSendNotification sync.RWMutex
}

// GetNotifications calls GetNotificationsFunc.
func (mock *ServiceMock) GetNotifications() (map[string]map[string]*domain.Notification, error) {
	if mock.GetNotificationsFunc == nil {
		panic("ServiceMock.GetNotificationsFunc: method is nil but Service.GetNotifications was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetNotifications.Lock()
	mock.calls.GetNotifications = append(mock.calls.GetNotifications, callInfo)
	mock.lockGetNotifications.Unlock()
	return mock.GetNotificationsFunc()
}

// GetNotificationsCalls gets all the calls that were made to GetNotifications.
// Check the length with:
//
//	len(mockedService.GetNotificationsCalls())
func (mock *ServiceMock) GetNotificationsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetNotifications.RLock()
	calls = mock.calls.GetNotifications
	mock.lockGetNotifications.RUnlock()
	return calls
}

// GetRuleByType calls GetRuleByTypeFunc.
func (mock *ServiceMock) GetRuleByType(s string) (*domain.RateLimitRule, error) {
	if mock.GetRuleByTypeFunc == nil {
		panic("ServiceMock.GetRuleByTypeFunc: method is nil but Service.GetRuleByType was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockGetRuleByType.Lock()
	mock.calls.GetRuleByType = append(mock.calls.GetRuleByType, callInfo)
	mock.lockGetRuleByType.Unlock()
	return mock.GetRuleByTypeFunc(s)
}

// GetRuleByTypeCalls gets all the calls that were made to GetRuleByType.
// Check the length with:
//
//	len(mockedService.GetRuleByTypeCalls())
func (mock *ServiceMock) GetRuleByTypeCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockGetRuleByType.RLock()
	calls = mock.calls.GetRuleByType
	mock.lockGetRuleByType.RUnlock()
	return calls
}

// GetRules calls GetRulesFunc.
func (mock *ServiceMock) GetRules() (map[string]*domain.RateLimitRule, error) {
	if mock.GetRulesFunc == nil {
		panic("ServiceMock.GetRulesFunc: method is nil but Service.GetRules was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetRules.Lock()
	mock.calls.GetRules = append(mock.calls.GetRules, callInfo)
	mock.lockGetRules.Unlock()
	return mock.GetRulesFunc()
}

// GetRulesCalls gets all the calls that were made to GetRules.
// Check the length with:
//
//	len(mockedService.GetRulesCalls())
func (mock *ServiceMock) GetRulesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetRules.RLock()
	calls = mock.calls.GetRules
	mock.lockGetRules.RUnlock()
	return calls
}

// SendNotification calls SendNotificationFunc.
func (mock *ServiceMock) SendNotification(s1 string, s2 string) error {
	if mock.SendNotificationFunc == nil {
		panic("ServiceMock.SendNotificationFunc: method is nil but Service.SendNotification was just called")
	}
	callInfo := struct {
		S1 string
		S2 string
	}{
		S1: s1,
		S2: s2,
	}
	mock.lockSendNotification.Lock()
	mock.calls.SendNotification = append(mock.calls.SendNotification, callInfo)
	mock.lockSendNotification.Unlock()
	return mock.SendNotificationFunc(s1, s2)
}

// SendNotificationCalls gets all the calls that were made to SendNotification.
// Check the length with:
//
//	len(mockedService.SendNotificationCalls())
func (mock *ServiceMock) SendNotificationCalls() []struct {
	S1 string
	S2 string
} {
	var calls []struct {
		S1 string
		S2 string
	}
	mock.lockSendNotification.RLock()
	calls = mock.calls.SendNotification
	mock.lockSendNotification.RUnlock()
	return calls
}
