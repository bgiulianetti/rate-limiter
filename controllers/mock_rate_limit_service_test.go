// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package controllers

import (
	"rate-limiter/domain"
	"sync"
)

// Ensure, that RateLimitServiceMock does implement RateLimitService.
// If this is not the case, regenerate this file with moq.
var _ RateLimitService = &RateLimitServiceMock{}

// RateLimitServiceMock is a mock implementation of RateLimitService.
//
//	func TestSomethingThatUsesRateLimitService(t *testing.T) {
//
//		// make and configure a mocked RateLimitService
//		mockedRateLimitService := &RateLimitServiceMock{
//			SendNotificationFunc: func(sendNotificationParams domain.SendNotificationParams) error {
//				panic("mock out the SendNotification method")
//			},
//		}
//
//		// use mockedRateLimitService in code that requires RateLimitService
//		// and then make assertions.
//
//	}
type RateLimitServiceMock struct {
	// SendNotificationFunc mocks the SendNotification method.
	SendNotificationFunc func(sendNotificationParams domain.SendNotificationParams) error

	// calls tracks calls to the methods.
	calls struct {
		// SendNotification holds details about calls to the SendNotification method.
		SendNotification []struct {
			// SendNotificationParams is the sendNotificationParams argument value.
			SendNotificationParams domain.SendNotificationParams
		}
	}
	lockSendNotification sync.RWMutex
}

// SendNotification calls SendNotificationFunc.
func (mock *RateLimitServiceMock) SendNotification(sendNotificationParams domain.SendNotificationParams) error {
	if mock.SendNotificationFunc == nil {
		panic("RateLimitServiceMock.SendNotificationFunc: method is nil but RateLimitService.SendNotification was just called")
	}
	callInfo := struct {
		SendNotificationParams domain.SendNotificationParams
	}{
		SendNotificationParams: sendNotificationParams,
	}
	mock.lockSendNotification.Lock()
	mock.calls.SendNotification = append(mock.calls.SendNotification, callInfo)
	mock.lockSendNotification.Unlock()
	return mock.SendNotificationFunc(sendNotificationParams)
}

// SendNotificationCalls gets all the calls that were made to SendNotification.
// Check the length with:
//
//	len(mockedRateLimitService.SendNotificationCalls())
func (mock *RateLimitServiceMock) SendNotificationCalls() []struct {
	SendNotificationParams domain.SendNotificationParams
} {
	var calls []struct {
		SendNotificationParams domain.SendNotificationParams
	}
	mock.lockSendNotification.RLock()
	calls = mock.calls.SendNotification
	mock.lockSendNotification.RUnlock()
	return calls
}
