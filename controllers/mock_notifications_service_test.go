// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package controllers

import (
	"rate-limiter/domain"
	"sync"
)

// Ensure, that NotificationsServiceMock does implement NotificationsService.
// If this is not the case, regenerate this file with moq.
var _ NotificationsService = &NotificationsServiceMock{}

// NotificationsServiceMock is a mock implementation of NotificationsService.
//
//	func TestSomethingThatUsesNotificationsService(t *testing.T) {
//
//		// make and configure a mocked NotificationsService
//		mockedNotificationsService := &NotificationsServiceMock{
//			GetNotificationsByUserFunc: func(userID string) ([]*domain.Notification, error) {
//				panic("mock out the GetNotificationsByUser method")
//			},
//			SendNotificationFunc: func(sendNotificationParams domain.SendNotificationParams) error {
//				panic("mock out the SendNotification method")
//			},
//		}
//
//		// use mockedNotificationsService in code that requires NotificationsService
//		// and then make assertions.
//
//	}
type NotificationsServiceMock struct {
	// GetNotificationsByUserFunc mocks the GetNotificationsByUser method.
	GetNotificationsByUserFunc func(userID string) ([]*domain.Notification, error)

	// SendNotificationFunc mocks the SendNotification method.
	SendNotificationFunc func(sendNotificationParams domain.SendNotificationParams) error

	// calls tracks calls to the methods.
	calls struct {
		// GetNotificationsByUser holds details about calls to the GetNotificationsByUser method.
		GetNotificationsByUser []struct {
			// UserID is the userID argument value.
			UserID string
		}
		// SendNotification holds details about calls to the SendNotification method.
		SendNotification []struct {
			// SendNotificationParams is the sendNotificationParams argument value.
			SendNotificationParams domain.SendNotificationParams
		}
	}
	lockGetNotificationsByUser sync.RWMutex
	lockSendNotification       sync.RWMutex
}

// GetNotificationsByUser calls GetNotificationsByUserFunc.
func (mock *NotificationsServiceMock) GetNotificationsByUser(userID string) ([]*domain.Notification, error) {
	if mock.GetNotificationsByUserFunc == nil {
		panic("NotificationsServiceMock.GetNotificationsByUserFunc: method is nil but NotificationsService.GetNotificationsByUser was just called")
	}
	callInfo := struct {
		UserID string
	}{
		UserID: userID,
	}
	mock.lockGetNotificationsByUser.Lock()
	mock.calls.GetNotificationsByUser = append(mock.calls.GetNotificationsByUser, callInfo)
	mock.lockGetNotificationsByUser.Unlock()
	return mock.GetNotificationsByUserFunc(userID)
}

// GetNotificationsByUserCalls gets all the calls that were made to GetNotificationsByUser.
// Check the length with:
//
//	len(mockedNotificationsService.GetNotificationsByUserCalls())
func (mock *NotificationsServiceMock) GetNotificationsByUserCalls() []struct {
	UserID string
} {
	var calls []struct {
		UserID string
	}
	mock.lockGetNotificationsByUser.RLock()
	calls = mock.calls.GetNotificationsByUser
	mock.lockGetNotificationsByUser.RUnlock()
	return calls
}

// SendNotification calls SendNotificationFunc.
func (mock *NotificationsServiceMock) SendNotification(sendNotificationParams domain.SendNotificationParams) error {
	if mock.SendNotificationFunc == nil {
		panic("NotificationsServiceMock.SendNotificationFunc: method is nil but NotificationsService.SendNotification was just called")
	}
	callInfo := struct {
		SendNotificationParams domain.SendNotificationParams
	}{
		SendNotificationParams: sendNotificationParams,
	}
	mock.lockSendNotification.Lock()
	mock.calls.SendNotification = append(mock.calls.SendNotification, callInfo)
	mock.lockSendNotification.Unlock()
	return mock.SendNotificationFunc(sendNotificationParams)
}

// SendNotificationCalls gets all the calls that were made to SendNotification.
// Check the length with:
//
//	len(mockedNotificationsService.SendNotificationCalls())
func (mock *NotificationsServiceMock) SendNotificationCalls() []struct {
	SendNotificationParams domain.SendNotificationParams
} {
	var calls []struct {
		SendNotificationParams domain.SendNotificationParams
	}
	mock.lockSendNotification.RLock()
	calls = mock.calls.SendNotification
	mock.lockSendNotification.RUnlock()
	return calls
}
