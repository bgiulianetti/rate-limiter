// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"rate-limiter/domain"
	"sync"
)

// Ensure, that NotificationsContainerMock does implement NotificationsContainer.
// If this is not the case, regenerate this file with moq.
var _ NotificationsContainer = &NotificationsContainerMock{}

// NotificationsContainerMock is a mock implementation of NotificationsContainer.
//
//	func TestSomethingThatUsesNotificationsContainer(t *testing.T) {
//
//		// make and configure a mocked NotificationsContainer
//		mockedNotificationsContainer := &NotificationsContainerMock{
//			AddNotificationFunc: func(userID string, notificationType string) error {
//				panic("mock out the AddNotification method")
//			},
//			GetNotificationsByUserFunc: func(userID string) ([]*domain.Notification, error) {
//				panic("mock out the GetNotificationsByUser method")
//			},
//			GetNotificationsByUserAndTypeAndIntervalFunc: func(params domain.GetNotificationParams) ([]*domain.Notification, error) {
//				panic("mock out the GetNotificationsByUserAndTypeAndInterval method")
//			},
//		}
//
//		// use mockedNotificationsContainer in code that requires NotificationsContainer
//		// and then make assertions.
//
//	}
type NotificationsContainerMock struct {
	// AddNotificationFunc mocks the AddNotification method.
	AddNotificationFunc func(userID string, notificationType string) error

	// GetNotificationsByUserFunc mocks the GetNotificationsByUser method.
	GetNotificationsByUserFunc func(userID string) ([]*domain.Notification, error)

	// GetNotificationsByUserAndTypeAndIntervalFunc mocks the GetNotificationsByUserAndTypeAndInterval method.
	GetNotificationsByUserAndTypeAndIntervalFunc func(params domain.GetNotificationParams) ([]*domain.Notification, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddNotification holds details about calls to the AddNotification method.
		AddNotification []struct {
			// UserID is the userID argument value.
			UserID string
			// NotificationType is the notificationType argument value.
			NotificationType string
		}
		// GetNotificationsByUser holds details about calls to the GetNotificationsByUser method.
		GetNotificationsByUser []struct {
			// UserID is the userID argument value.
			UserID string
		}
		// GetNotificationsByUserAndTypeAndInterval holds details about calls to the GetNotificationsByUserAndTypeAndInterval method.
		GetNotificationsByUserAndTypeAndInterval []struct {
			// Params is the params argument value.
			Params domain.GetNotificationParams
		}
	}
	lockAddNotification                          sync.RWMutex
	lockGetNotificationsByUser                   sync.RWMutex
	lockGetNotificationsByUserAndTypeAndInterval sync.RWMutex
}

// AddNotification calls AddNotificationFunc.
func (mock *NotificationsContainerMock) AddNotification(userID string, notificationType string) error {
	if mock.AddNotificationFunc == nil {
		panic("NotificationsContainerMock.AddNotificationFunc: method is nil but NotificationsContainer.AddNotification was just called")
	}
	callInfo := struct {
		UserID           string
		NotificationType string
	}{
		UserID:           userID,
		NotificationType: notificationType,
	}
	mock.lockAddNotification.Lock()
	mock.calls.AddNotification = append(mock.calls.AddNotification, callInfo)
	mock.lockAddNotification.Unlock()
	return mock.AddNotificationFunc(userID, notificationType)
}

// AddNotificationCalls gets all the calls that were made to AddNotification.
// Check the length with:
//
//	len(mockedNotificationsContainer.AddNotificationCalls())
func (mock *NotificationsContainerMock) AddNotificationCalls() []struct {
	UserID           string
	NotificationType string
} {
	var calls []struct {
		UserID           string
		NotificationType string
	}
	mock.lockAddNotification.RLock()
	calls = mock.calls.AddNotification
	mock.lockAddNotification.RUnlock()
	return calls
}

// GetNotificationsByUser calls GetNotificationsByUserFunc.
func (mock *NotificationsContainerMock) GetNotificationsByUser(userID string) ([]*domain.Notification, error) {
	if mock.GetNotificationsByUserFunc == nil {
		panic("NotificationsContainerMock.GetNotificationsByUserFunc: method is nil but NotificationsContainer.GetNotificationsByUser was just called")
	}
	callInfo := struct {
		UserID string
	}{
		UserID: userID,
	}
	mock.lockGetNotificationsByUser.Lock()
	mock.calls.GetNotificationsByUser = append(mock.calls.GetNotificationsByUser, callInfo)
	mock.lockGetNotificationsByUser.Unlock()
	return mock.GetNotificationsByUserFunc(userID)
}

// GetNotificationsByUserCalls gets all the calls that were made to GetNotificationsByUser.
// Check the length with:
//
//	len(mockedNotificationsContainer.GetNotificationsByUserCalls())
func (mock *NotificationsContainerMock) GetNotificationsByUserCalls() []struct {
	UserID string
} {
	var calls []struct {
		UserID string
	}
	mock.lockGetNotificationsByUser.RLock()
	calls = mock.calls.GetNotificationsByUser
	mock.lockGetNotificationsByUser.RUnlock()
	return calls
}

// GetNotificationsByUserAndTypeAndInterval calls GetNotificationsByUserAndTypeAndIntervalFunc.
func (mock *NotificationsContainerMock) GetNotificationsByUserAndTypeAndInterval(params domain.GetNotificationParams) ([]*domain.Notification, error) {
	if mock.GetNotificationsByUserAndTypeAndIntervalFunc == nil {
		panic("NotificationsContainerMock.GetNotificationsByUserAndTypeAndIntervalFunc: method is nil but NotificationsContainer.GetNotificationsByUserAndTypeAndInterval was just called")
	}
	callInfo := struct {
		Params domain.GetNotificationParams
	}{
		Params: params,
	}
	mock.lockGetNotificationsByUserAndTypeAndInterval.Lock()
	mock.calls.GetNotificationsByUserAndTypeAndInterval = append(mock.calls.GetNotificationsByUserAndTypeAndInterval, callInfo)
	mock.lockGetNotificationsByUserAndTypeAndInterval.Unlock()
	return mock.GetNotificationsByUserAndTypeAndIntervalFunc(params)
}

// GetNotificationsByUserAndTypeAndIntervalCalls gets all the calls that were made to GetNotificationsByUserAndTypeAndInterval.
// Check the length with:
//
//	len(mockedNotificationsContainer.GetNotificationsByUserAndTypeAndIntervalCalls())
func (mock *NotificationsContainerMock) GetNotificationsByUserAndTypeAndIntervalCalls() []struct {
	Params domain.GetNotificationParams
} {
	var calls []struct {
		Params domain.GetNotificationParams
	}
	mock.lockGetNotificationsByUserAndTypeAndInterval.RLock()
	calls = mock.calls.GetNotificationsByUserAndTypeAndInterval
	mock.lockGetNotificationsByUserAndTypeAndInterval.RUnlock()
	return calls
}
