// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"rate-limiter/domain"
	"sync"
)

// Ensure, that RulesContainerMock does implement RulesContainer.
// If this is not the case, regenerate this file with moq.
var _ RulesContainer = &RulesContainerMock{}

// RulesContainerMock is a mock implementation of RulesContainer.
//
//	func TestSomethingThatUsesRulesContainer(t *testing.T) {
//
//		// make and configure a mocked RulesContainer
//		mockedRulesContainer := &RulesContainerMock{
//			GetRuleByTypeFunc: func(s string) (*domain.RateLimitRule, error) {
//				panic("mock out the GetRuleByType method")
//			},
//			GetRulesFunc: func() (map[string]*domain.RateLimitRule, error) {
//				panic("mock out the GetRules method")
//			},
//		}
//
//		// use mockedRulesContainer in code that requires RulesContainer
//		// and then make assertions.
//
//	}
type RulesContainerMock struct {
	// GetRuleByTypeFunc mocks the GetRuleByType method.
	GetRuleByTypeFunc func(s string) (*domain.RateLimitRule, error)

	// GetRulesFunc mocks the GetRules method.
	GetRulesFunc func() (map[string]*domain.RateLimitRule, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetRuleByType holds details about calls to the GetRuleByType method.
		GetRuleByType []struct {
			// S is the s argument value.
			S string
		}
		// GetRules holds details about calls to the GetRules method.
		GetRules []struct {
		}
	}
	lockGetRuleByType sync.RWMutex
	lockGetRules      sync.RWMutex
}

// GetRuleByType calls GetRuleByTypeFunc.
func (mock *RulesContainerMock) GetRuleByType(s string) (*domain.RateLimitRule, error) {
	if mock.GetRuleByTypeFunc == nil {
		panic("RulesContainerMock.GetRuleByTypeFunc: method is nil but RulesContainer.GetRuleByType was just called")
	}
	callInfo := struct {
		S string
	}{
		S: s,
	}
	mock.lockGetRuleByType.Lock()
	mock.calls.GetRuleByType = append(mock.calls.GetRuleByType, callInfo)
	mock.lockGetRuleByType.Unlock()
	return mock.GetRuleByTypeFunc(s)
}

// GetRuleByTypeCalls gets all the calls that were made to GetRuleByType.
// Check the length with:
//
//	len(mockedRulesContainer.GetRuleByTypeCalls())
func (mock *RulesContainerMock) GetRuleByTypeCalls() []struct {
	S string
} {
	var calls []struct {
		S string
	}
	mock.lockGetRuleByType.RLock()
	calls = mock.calls.GetRuleByType
	mock.lockGetRuleByType.RUnlock()
	return calls
}

// GetRules calls GetRulesFunc.
func (mock *RulesContainerMock) GetRules() (map[string]*domain.RateLimitRule, error) {
	if mock.GetRulesFunc == nil {
		panic("RulesContainerMock.GetRulesFunc: method is nil but RulesContainer.GetRules was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetRules.Lock()
	mock.calls.GetRules = append(mock.calls.GetRules, callInfo)
	mock.lockGetRules.Unlock()
	return mock.GetRulesFunc()
}

// GetRulesCalls gets all the calls that were made to GetRules.
// Check the length with:
//
//	len(mockedRulesContainer.GetRulesCalls())
func (mock *RulesContainerMock) GetRulesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetRules.RLock()
	calls = mock.calls.GetRules
	mock.lockGetRules.RUnlock()
	return calls
}
